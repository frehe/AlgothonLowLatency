#include <vector>
#include <sstream>
#include <string>
#include <iostream>

std::size_t AVG_LENGTH = 3; // Length over which to average
std::size_t STRING_LENGTH = 500;

int predict(std::vector<float> v)
{
    float sum = 0.0;
    for (std::vector<float>::iterator j = v.end() - AVG_LENGTH; j < v.end(); j++)
    {
        sum += *j;
    }
    if (sum < 0)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

float test_predictor(std::vector<float> v)
{
    size_t SIZE = v.size();
    std::vector<int> preds;
    std::vector<int> labels;
    float accuracy = 0;

    for (uint16_t i = 0; i < SIZE - AVG_LENGTH; i++)
    {
        std::vector<float> slice;
        for (uint16_t k = 0; k < AVG_LENGTH; k++)
        {
            slice.push_back(v.at(i + k));
        }
        preds.push_back(predict(slice));
        if (v.at(i + AVG_LENGTH) < 0)
            labels.push_back(0);
        else
            labels.push_back(1);
        if (preds.back() == labels.back())
            accuracy += 1;
    }

    accuracy /= (SIZE - AVG_LENGTH);
    return accuracy;
}

void test_function()
{
    std::string s = "-0.0007502131639160408,0.000272869910964104,-0.0027320555208265518,-0.003974785934857689,0.014587852421053624,0.004591190294226096,0.0072488403859835284,0.01037864415599719,-0.0013245912261897262,0.0,0.00039756162728781994,-0.0030520193542203974,0.015625833016110792,0.003330832847950285,0.0018239859138052899,-0.004108656772787784,-0.0037319583694421722,-0.01002052026292678,-0.00471526691347122,0.006965433316242335,0.000925069446172812,-0.000396353552553018,-0.003110216582580259,0.005947285090619333,-0.0111303653363505,0.014156484348477983,0.013440536381221032,-0.007938098811613614,0.0019578417792116393,0.0005866058502903577,-0.001826127162398781,0.0,0.0005873331979457347,-0.000979080395434112,0.003910583097391602,-0.008295550364380231,0.0,0.009400774284705888,0.0010390960799862455,0.0026577658013398715,0.002069456859626509,0.0015492869924847324,-0.0013554948017034827,0.0001291739328800315,0.017033132556240456,0.004181720596673605,0.0,-0.012854138170216706,0.009434032233358714,-0.006875504548811534,0.013073740824055628,0.005345084255319001,0.003193390522551192,-0.006208278805837214,0.0003773584950441157,0.0035778213478839024,-0.005655057483344988,-0.009623982094334448,-0.005230604513274714,0.0031288937119329794,-0.019441838069027332,-0.03917650948879052,0.011894901848275125,0.0010015692086886316,-0.02980442770666439,0.00910310519393883,0.009426035274761818,0.0021574981400210927,0.017822452187576707,0.010857155506953183,0.0035278013983282134,0.0,-0.008250979950574612,0.0010515248077201979,-0.0015777021416176974,0.012942203003627093,0.006537874859056089,-0.014492536351644044,-0.015902152922777326,-0.002664004239520031,0.01587860023670004,0.008887204805122796,0.010741658867068887,0.00877901252080868,-0.0020436844512532787,0.01585623377293279,0.001760342463884555,-0.004659077873186662,-0.004744292037629471,-0.0050217821581146575,0.005592287070422312,-0.009679138224904085,-0.00025598361844631916,0.005807476675153069,-0.024477872683316162,-0.021754318673884363,0.0216238895619218";
    std::vector<float> v;
    std::stringstream stream(s);
    for (float i; stream >> i;)
    {
        v.push_back(i);
        if (stream.peek() == ',')
        {
            stream.ignore();
        }
    }
    float accuracy = test_predictor(v);
    std::cout << "Accuracy on test: " << accuracy << std::endl;
}

int main()
{
    std::string s;
    std::vector<float> v;

    // Print demo stats
    // test_function();

    while (std::cin >> s)
    {
        v.clear();
        printf("Input row: %s\n", s.c_str());
        // Parse string to vector
        std::stringstream stream(s);
        for (float i; stream >> i;)
        {
            v.push_back(i);
            if (stream.peek() == ',')
            {
                stream.ignore();
            }
        }
        printf("Vector: ");
        for (std::vector<float>::const_iterator i = v.begin(); i != v.end(); ++i)
            std::cout << *i << ' ';
        std::cout << std::endl;
        // Print prediction
        std::cout << predict(v) << std::endl;
    }
    return 0;
}
